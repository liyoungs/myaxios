{"version":3,"sources":["webpack:///./src/components/jsbase/JsBaseAjax.vue?67c4","webpack:///src/components/jsbase/JsBaseAjax.vue","webpack:///./src/components/jsbase/JsBaseAjax.vue?7149","webpack:///./src/components/jsbase/JsBaseAjax.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticStyle","_v","attrs","on","ajaxInfo","slot","_l","item","key","id","_s","name","staticClass","tableData","scopedSlots","_u","fn","scope","row","describe","title","index","responseData","readyStateData","domProps","_e","staticRenderFns","data","ajax_info","demo_get","methods","$store","state","todayVideo","XMLHTTP","onreadystatechange","readyState","status","res","code","open","send","created","mounted","console","log","component"],"mappings":"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","file":"js/chunk-2d0cc79b.9cf15a66.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticStyle:{\"padding-bottom\":\"30px\"}},[_c('h1',{staticStyle:{\"text-algin\":\"center\"}},[_vm._v(\"AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。\")]),_c('el-tag',[_vm._v(\" AJAX 最大的优点是在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容。 AJAX 不需要任何浏览器插件，但需要用户允许JavaScript在浏览器上执行。 \")]),_c('el-card',[_c('el-button',{attrs:{\"slot\":\"header\"},on:{\"click\":_vm.ajaxInfo},slot:\"header\"},[_vm._v(\"Ajax\")]),_vm._l((_vm.ajax_info),function(item){return _c('el-button',{key:item.id,attrs:{\"type\":\"primary\",\"round\":\"\"}},[_vm._v(_vm._s(item.name))])})],2),_c('div',{staticStyle:{\"height\":\"36px\"}}),_c('el-tabs',{attrs:{\"tabPosition\":\"left\"}},[_c('el-tab-pane',[_c('span',{attrs:{\"slot\":\"label\"},slot:\"label\"},[_c('i',{staticClass:\"el-icon-date\"}),_vm._v(\" XMLHttpRequest 对象 \")]),_vm._v(\" 所有现代浏览器均支持 XMLHttpRequest 对象（IE5 和 IE6 使用 ActiveXObject）。 \"),_c('div',{staticStyle:{\"height\":\"6px\"}}),_c('el-alert',{attrs:{\"closable\":false,\"title\":\"所有现代浏览器（IE7+、Firefox、Chrome、Safari 以及 Opera）均内建 XMLHttpRequest 对象。\"}}),_c('div',{staticStyle:{\"height\":\"6px\"}}),_c('el-tag',{attrs:{\"type\":\"success\"}},[_vm._v(\"var xmlhttp = new XMLHttpRequest();\")]),_c('div',{staticStyle:{\"height\":\"6px\"}}),_c('el-alert',{attrs:{\"closable\":false,\"title\":\"老版本的 Internet Explorer （IE5 和 IE6）使用 ActiveX 对象：\"}}),_c('div',{staticStyle:{\"height\":\"6px\"}}),_c('el-tag',{attrs:{\"type\":\"success\"}},[_vm._v(\"var xmlhttp = new ActiveXObject(\\\"Microsoft.XMLHTTP\\\");\")]),_c('div',{staticStyle:{\"height\":\"6px\"}}),_c('el-alert',{attrs:{\"closable\":false,\"effect\":\"dark\",\"type\":\"error\",\"title\":\"为了应对所有的现代浏览器，包括 IE5 和 IE6，请检查浏览器是否支持 XMLHttpRequest 对象。如果支持，创建 XMLHttpRequest 对象，否则创建 ActiveXObject ：\"}}),_c('div',{staticStyle:{\"height\":\"6px\"}}),_c('el-tag',{staticStyle:{\"height\":\"auto\"},attrs:{\"type\":\"danger\"}},[_vm._v(\" var xmlhttp; \"),_c('br'),_vm._v(\" if (window.XMLHttpRequest) { \"),_c('br'),_vm._v(\" // IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码 \"),_c('br'),_vm._v(\" xmlhttp=new XMLHttpRequest(); \"),_c('br'),_vm._v(\" } else { \"),_c('br'),_vm._v(\" // IE6, IE5 浏览器执行代码 \"),_c('br'),_vm._v(\" xmlhttp=new ActiveXObject(\\\"Microsoft.XMLHTTP\\\"); \"),_c('br'),_vm._v(\" } \")])],1),_c('el-tab-pane',{attrs:{\"label\":\"XMLHttpRequest 请求。\"}},[_vm._v(\" 如需将请求发送到服务器，我们使用 XMLHttpRequest 对象的 open() 和 send() 方法： \"),_c('div',{staticStyle:{\"height\":\"6px\"}}),_c('el-tag',{staticStyle:{\"height\":\"auto\"},attrs:{\"type\":\"danger\"}},[_vm._v(\" xmlhttp.open(\\\"GET\\\",\\\"ajax_info.txt\\\",true); \"),_c('br'),_vm._v(\" xmlhttp.send(); \")]),_c('div',{staticStyle:{\"height\":\"6px\"}}),_c('el-table',{attrs:{\"data\":_vm.tableData,\"border\":\"\",\"stripe\":\"\"}},[_c('el-table-column',{attrs:{\"prop\":\"method\",\"label\":\"方法\",\"width\":\"240\"}}),_c('el-table-column',{attrs:{\"prop\":\"describe\",\"label\":\"描述\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_vm._v(\" \"+_vm._s(scope.row.describe.title)+\" \"),_c('ul',_vm._l((scope.row.describe.desc),function(item,index){return _c('li',{key:index},[_vm._v(_vm._s(item))])}),0)]}}])})],1),_vm._v(\" 在 open 和 send 之间使用 setRequestHeader \"),_c('br'),_c('el-tag',{staticStyle:{\"height\":\"auto\"},attrs:{\"type\":\"danger\"}},[_vm._v(\" xmlhttp.setRequestHeader(\\\"Content-type\\\",\\\"application/x-www-form-urlencoded\\\"); \")]),_c('h2',[_vm._v(\"GET 还是 POST？\")]),_vm._v(\" 与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。 \"),_c('br'),_vm._v(\" 然而，在以下情况中，请使用 POST 请求： \"),_c('ul',[_c('li',[_vm._v(\"无法使用缓存文件（更新服务器上的文件或数据库）\")]),_c('li',[_vm._v(\"向服务器发送大量数据（POST 没有数据量限制）\")]),_c('li',[_vm._v(\"发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠\")])])],1),_c('el-tab-pane',{attrs:{\"label\":\"XHR 响应\"}},[_vm._v(\" 需获得来自服务器的响应，请使用 XMLHttpRequest 对象的 responseText 或 responseXML 属性。 \"),_c('div',{staticStyle:{\"height\":\"6px\"}}),_c('el-table',{attrs:{\"data\":_vm.responseData,\"border\":\"\",\"stripe\":\"\"}},[_c('el-table-column',{attrs:{\"prop\":\"method\",\"label\":\"属性\",\"width\":\"240\"}}),_c('el-table-column',{attrs:{\"prop\":\"describe\",\"label\":\"描述\"}})],1)],1),_c('el-tab-pane',{attrs:{\"label\":\"XHR readyState\"}},[_vm._v(\" 当请求被发送到服务器时，我们需要执行一些基于响应的任务。 \"),_c('br'),_vm._v(\" 每当 readyState 改变时，就会触发 onreadystatechange 事件。 \"),_c('br'),_vm._v(\" readyState 属性存有 XMLHttpRequest 的状态信息。 \"),_c('br'),_vm._v(\" 下面是 XMLHttpRequest 对象的三个重要的属性： \"),_c('div',{staticStyle:{\"height\":\"6px\"}}),_c('el-table',{attrs:{\"data\":_vm.readyStateData,\"border\":\"\",\"stripe\":\"\"}},[_c('el-table-column',{attrs:{\"prop\":\"method\",\"label\":\"属性\",\"width\":\"240\"}}),_c('el-table-column',{attrs:{\"prop\":\"describe\",\"label\":\"描述\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_c('div',{domProps:{\"innerHTML\":_vm._s(scope.row.describe.title)}}),(scope.row.describe.desc)?[_c('ul',_vm._l((scope.row.describe.desc),function(item,index){return _c('li',{key:index},[_vm._v(_vm._s(item))])}),0)]:_vm._e()]}}])})],1)],1)],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div style=\"padding-bottom:30px\">\r\n    <h1 style=\"text-algin:center;\">AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</h1>\r\n    <el-tag>\r\n      AJAX 最大的优点是在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容。 AJAX\r\n      不需要任何浏览器插件，但需要用户允许JavaScript在浏览器上执行。\r\n    </el-tag>\r\n    <el-card>\r\n      <el-button slot=\"header\" @click=\"ajaxInfo\">Ajax</el-button>\r\n      <el-button v-for=\"item in ajax_info\" :key=\"item.id\" type=\"primary\" round>{{ item.name }}</el-button>\r\n    </el-card>\r\n    <div style=\"height:36px\"></div>\r\n    <el-tabs tabPosition=\"left\">\r\n      <el-tab-pane>\r\n        <span slot=\"label\">\r\n          <i class=\"el-icon-date\"></i>\r\n          XMLHttpRequest 对象\r\n        </span>\r\n        所有现代浏览器均支持 XMLHttpRequest 对象（IE5 和 IE6 使用 ActiveXObject）。\r\n        <div style=\"height:6px\"></div>\r\n        <el-alert\r\n          :closable=\"false\"\r\n          title=\"所有现代浏览器（IE7+、Firefox、Chrome、Safari 以及 Opera）均内建 XMLHttpRequest 对象。\"\r\n        ></el-alert>\r\n        <div style=\"height:6px\"></div>\r\n        <el-tag type=\"success\">var xmlhttp = new XMLHttpRequest();</el-tag>\r\n        <div style=\"height:6px\"></div>\r\n        <el-alert\r\n          :closable=\"false\"\r\n          title=\"老版本的 Internet Explorer （IE5 和 IE6）使用 ActiveX 对象：\"\r\n        ></el-alert>\r\n        <div style=\"height:6px\"></div>\r\n        <el-tag type=\"success\">var xmlhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");</el-tag>\r\n        <div style=\"height:6px\"></div>\r\n        <el-alert\r\n          :closable=\"false\"\r\n          effect=\"dark\"\r\n          type=\"error\"\r\n          title=\"为了应对所有的现代浏览器，包括 IE5 和 IE6，请检查浏览器是否支持 XMLHttpRequest 对象。如果支持，创建 XMLHttpRequest 对象，否则创建 ActiveXObject ：\"\r\n        ></el-alert>\r\n        <div style=\"height:6px\"></div>\r\n        <el-tag type=\"danger\" style=\"height:auto\">\r\n          var xmlhttp;\r\n          <br />\r\n          if (window.XMLHttpRequest) {\r\n          <br />\r\n          // IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码\r\n          <br />\r\n          xmlhttp=new XMLHttpRequest();\r\n          <br />\r\n          } else {\r\n          <br />\r\n          // IE6, IE5 浏览器执行代码\r\n          <br />\r\n          xmlhttp=new ActiveXObject(\"Microsoft.XMLHTTP\");\r\n          <br />\r\n          }\r\n        </el-tag>\r\n      </el-tab-pane>\r\n\r\n      <el-tab-pane label=\"XMLHttpRequest 请求。\">\r\n        如需将请求发送到服务器，我们使用 XMLHttpRequest 对象的 open() 和 send() 方法：\r\n        <div style=\"height:6px\"></div>\r\n        <el-tag type=\"danger\" style=\"height:auto\">\r\n          xmlhttp.open(\"GET\",\"ajax_info.txt\",true);\r\n          <br />\r\n          xmlhttp.send();\r\n        </el-tag>\r\n        <div style=\"height:6px\"></div>\r\n        <el-table :data=\"tableData\" border stripe>\r\n          <el-table-column prop=\"method\" label=\"方法\" width=\"240\"></el-table-column>\r\n          <el-table-column prop=\"describe\" label=\"描述\">\r\n            <template slot-scope=\"scope\">\r\n              {{ scope.row.describe.title }}\r\n              <ul>\r\n                <li v-for=\"(item, index) in scope.row.describe.desc\" :key=\"index\">{{ item }}</li>\r\n              </ul>\r\n            </template>\r\n          </el-table-column>\r\n        </el-table>\r\n        在 open 和 send 之间使用 setRequestHeader\r\n        <br />\r\n        <el-tag type=\"danger\" style=\"height:auto\">\r\n          xmlhttp.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\");\r\n        </el-tag>\r\n        <h2>GET 还是 POST？</h2>\r\n        与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。\r\n        <br />\r\n        然而，在以下情况中，请使用 POST 请求：\r\n        <ul>\r\n          <li>无法使用缓存文件（更新服务器上的文件或数据库）</li>\r\n          <li>向服务器发送大量数据（POST 没有数据量限制）</li>\r\n          <li>发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠</li>\r\n        </ul>\r\n      </el-tab-pane>\r\n      <el-tab-pane label=\"XHR 响应\">\r\n        需获得来自服务器的响应，请使用 XMLHttpRequest 对象的 responseText 或 responseXML 属性。\r\n        <div style=\"height:6px\"></div>\r\n        <el-table :data=\"responseData\" border stripe>\r\n          <el-table-column prop=\"method\" label=\"属性\" width=\"240\"></el-table-column>\r\n          <el-table-column prop=\"describe\" label=\"描述\"></el-table-column>\r\n        </el-table>\r\n      </el-tab-pane>\r\n      <el-tab-pane label=\"XHR readyState\">\r\n        当请求被发送到服务器时，我们需要执行一些基于响应的任务。\r\n        <br />\r\n        每当 readyState 改变时，就会触发 onreadystatechange 事件。\r\n        <br />\r\n        readyState 属性存有 XMLHttpRequest 的状态信息。\r\n        <br />\r\n        下面是 XMLHttpRequest 对象的三个重要的属性：\r\n        <div style=\"height:6px\"></div>\r\n        <el-table :data=\"readyStateData\" border stripe>\r\n          <el-table-column prop=\"method\" label=\"属性\" width=\"240\"></el-table-column>\r\n          <el-table-column prop=\"describe\" label=\"描述\">\r\n            <template slot-scope=\"scope\">\r\n              <div v-html=\"scope.row.describe.title\"></div>\r\n              <template v-if=\"scope.row.describe.desc\">\r\n                <ul>\r\n                  <li v-for=\"(item, index) in scope.row.describe.desc\" :key=\"index\">{{ item }}</li>\r\n                </ul>\r\n              </template>\r\n            </template>\r\n          </el-table-column>\r\n        </el-table>\r\n      </el-tab-pane>\r\n    </el-tabs>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"JsBaseAjax\",\r\n  data() {\r\n    return {\r\n      ajax_info: null,\r\n      demo_get: null,\r\n      tableData: [\r\n        {\r\n          method: \"open(method,url,async)\",\r\n          describe: {\r\n            title: \"规定请求的类型、URL 以及是否异步处理请求。\",\r\n            desc: [\r\n              \"method：请求的类型；GET 或 POST\",\r\n              \"url：文件在服务器上的位置\",\r\n              \"async：true（异步）或 false（同步）\"\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          method: \"send(string)\",\r\n          describe: {\r\n            title: \"将请求发送到服务器。\",\r\n            desc: [\"string：仅用于 POST 请求）\"]\r\n          }\r\n        },\r\n        {\r\n          method: \"setRequestHeader(header,value)\",\r\n          describe: {\r\n            title: \"向请求添加 HTTP 头。\",\r\n            desc: [\"header: 规定头的名称\", \"value: 规定头的值\"]\r\n          }\r\n        }\r\n      ],\r\n      responseData: [\r\n        {\r\n          method: \"responseText\",\r\n          describe: \"获得字符串形式的响应数据。\"\r\n        },\r\n        {\r\n          method: \"responseXML\",\r\n          describe: \"获得 XML 形式的响应数据。\"\r\n        }\r\n      ],\r\n      readyStateData: [\r\n        {\r\n          method: \"onreadystatechange\",\r\n          describe: {\r\n            title: \"存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。\",\r\n            desc: null\r\n          }\r\n        },\r\n        {\r\n          method: \"readyState\",\r\n          describe: {\r\n            title: \"存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。\",\r\n            desc: [\r\n              \"0: 请求未初始化\",\r\n              \"1: 服务器连接已建立\",\r\n              \"2: 请求已接收\",\r\n              \"3: 请求处理中\",\r\n              \"4: 请求已完成，且响应已就绪\"\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          method: \"status\",\r\n          describe: {\r\n            title: '200: \"OK\"<br />404: 未找到页面',\r\n            desc: null\r\n          }\r\n        }\r\n      ]\r\n    };\r\n  },\r\n  methods: {\r\n    ajaxInfo() {\r\n      if (this.$store.state.todayVideo) {\r\n        this.ajax_info = this.$store.state.todayVideo;\r\n      } else {\r\n        const XMLHTTP = new XMLHttpRequest();\r\n        XMLHTTP.onreadystatechange = () => {\r\n          if (XMLHTTP.readyState === 4 && XMLHTTP.status === 200) {\r\n            // const res = XMLHTTP.responseText;\r\n            const res = JSON.parse(XMLHTTP.responseText);\r\n            if (res.code === 200) {\r\n              this.ajax_info = res.result;\r\n              this.$store.commit(\"setTodayVideo\", res.result);\r\n            } else {\r\n              this.ajax_info = \"没有数据\";\r\n            }\r\n          } else {\r\n            this.ajax_info = \"请求错误\";\r\n          }\r\n        };\r\n        // i.tianqi.com/index.php?c=code&id=12&icon=1&num=5&site=12\r\n        XMLHTTP.open(\"get\", \"https://api.apiopen.top/videoHomeTab\", true);\r\n        XMLHTTP.send();\r\n      }\r\n    }\r\n  },\r\n  created() {},\r\n  mounted() {\r\n    console.log(\"mounted\");\r\n    // this.ajaxGet();\r\n    // console.log(this.demo_get);\r\n  }\r\n};\r\n</script>\r\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./JsBaseAjax.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./JsBaseAjax.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./JsBaseAjax.vue?vue&type=template&id=384ecb95&\"\nimport script from \"./JsBaseAjax.vue?vue&type=script&lang=js&\"\nexport * from \"./JsBaseAjax.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}