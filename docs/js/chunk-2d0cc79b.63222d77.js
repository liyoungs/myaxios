(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0cc79b"],{"4da6":function(t,e,a){"use strict";a.r(e);var s=function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticStyle:{"padding-bottom":"30px"}},[a("h1",{staticStyle:{"text-algin":"center"}},[t._v("AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。")]),a("el-tag",[t._v(" AJAX 最大的优点是在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容。 AJAX 不需要任何浏览器插件，但需要用户允许JavaScript在浏览器上执行。 ")]),a("el-card",[a("el-button",{attrs:{slot:"header"},on:{click:t.ajaxInfo},slot:"header"},[t._v("Ajax")]),t._l(t.ajax_info,(function(e){return a("el-button",{key:e.id,attrs:{type:"primary",round:""}},[t._v(t._s(e.name))])}))],2),a("div",{staticStyle:{height:"36px"}}),a("el-tabs",{attrs:{tabPosition:"left"}},[a("el-tab-pane",[a("span",{attrs:{slot:"label"},slot:"label"},[a("i",{staticClass:"el-icon-date"}),t._v(" XMLHttpRequest 对象 ")]),t._v(" 所有现代浏览器均支持 XMLHttpRequest 对象（IE5 和 IE6 使用 ActiveXObject）。 "),a("div",{staticStyle:{height:"6px"}}),a("el-alert",{attrs:{closable:!1,title:"所有现代浏览器（IE7+、Firefox、Chrome、Safari 以及 Opera）均内建 XMLHttpRequest 对象。"}}),a("div",{staticStyle:{height:"6px"}}),a("el-tag",{attrs:{type:"success"}},[t._v("var xmlhttp = new XMLHttpRequest();")]),a("div",{staticStyle:{height:"6px"}}),a("el-alert",{attrs:{closable:!1,title:"老版本的 Internet Explorer （IE5 和 IE6）使用 ActiveX 对象："}}),a("div",{staticStyle:{height:"6px"}}),a("el-tag",{attrs:{type:"success"}},[t._v('var xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");')]),a("div",{staticStyle:{height:"6px"}}),a("el-alert",{attrs:{closable:!1,effect:"dark",type:"error",title:"为了应对所有的现代浏览器，包括 IE5 和 IE6，请检查浏览器是否支持 XMLHttpRequest 对象。如果支持，创建 XMLHttpRequest 对象，否则创建 ActiveXObject ："}}),a("div",{staticStyle:{height:"6px"}}),a("el-tag",{staticStyle:{height:"auto"},attrs:{type:"danger"}},[t._v(" var xmlhttp; "),a("br"),t._v(" if (window.XMLHttpRequest) { "),a("br"),t._v(" // IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码 "),a("br"),t._v(" xmlhttp=new XMLHttpRequest(); "),a("br"),t._v(" } else { "),a("br"),t._v(" // IE6, IE5 浏览器执行代码 "),a("br"),t._v(' xmlhttp=new ActiveXObject("Microsoft.XMLHTTP"); '),a("br"),t._v(" } ")])],1),a("el-tab-pane",{attrs:{label:"XMLHttpRequest 请求。"}},[t._v(" 如需将请求发送到服务器，我们使用 XMLHttpRequest 对象的 open() 和 send() 方法： "),a("div",{staticStyle:{height:"6px"}}),a("el-tag",{staticStyle:{height:"auto"},attrs:{type:"danger"}},[t._v(' xmlhttp.open("GET","ajax_info.txt",true); '),a("br"),t._v(" xmlhttp.send(); ")]),a("div",{staticStyle:{height:"6px"}}),a("el-table",{attrs:{data:t.tableData,border:"",stripe:""}},[a("el-table-column",{attrs:{prop:"method",label:"方法",width:"240"}}),a("el-table-column",{attrs:{prop:"describe",label:"描述"},scopedSlots:t._u([{key:"default",fn:function(e){return[t._v(" "+t._s(e.row.describe.title)+" "),a("ul",t._l(e.row.describe.desc,(function(e,s){return a("li",{key:s},[t._v(t._s(e))])})),0)]}}])})],1),t._v(" 在 open 和 send 之间使用 setRequestHeader "),a("br"),a("el-tag",{staticStyle:{height:"auto"},attrs:{type:"danger"}},[t._v(' xmlhttp.setRequestHeader("Content-type","application/x-www-form-urlencoded"); ')]),a("h2",[t._v("GET 还是 POST？")]),t._v(" 与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。 "),a("br"),t._v(" 然而，在以下情况中，请使用 POST 请求： "),a("ul",[a("li",[t._v("无法使用缓存文件（更新服务器上的文件或数据库）")]),a("li",[t._v("向服务器发送大量数据（POST 没有数据量限制）")]),a("li",[t._v("发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠")])])],1),a("el-tab-pane",{attrs:{label:"XHR 响应"}},[t._v(" 需获得来自服务器的响应，请使用 XMLHttpRequest 对象的 responseText 或 responseXML 属性。 "),a("div",{staticStyle:{height:"6px"}}),a("el-table",{attrs:{data:t.responseData,border:"",stripe:""}},[a("el-table-column",{attrs:{prop:"method",label:"属性",width:"240"}}),a("el-table-column",{attrs:{prop:"describe",label:"描述"}})],1)],1),a("el-tab-pane",{attrs:{label:"XHR readyState"}},[t._v(" 当请求被发送到服务器时，我们需要执行一些基于响应的任务。 "),a("br"),t._v(" 每当 readyState 改变时，就会触发 onreadystatechange 事件。 "),a("br"),t._v(" readyState 属性存有 XMLHttpRequest 的状态信息。 "),a("br"),t._v(" 下面是 XMLHttpRequest 对象的三个重要的属性： "),a("div",{staticStyle:{height:"6px"}}),a("el-table",{attrs:{data:t.readyStateData,border:"",stripe:""}},[a("el-table-column",{attrs:{prop:"method",label:"属性",width:"240"}}),a("el-table-column",{attrs:{prop:"describe",label:"描述"},scopedSlots:t._u([{key:"default",fn:function(e){return[a("div",{domProps:{innerHTML:t._s(e.row.describe.title)}}),e.row.describe.desc?[a("ul",t._l(e.row.describe.desc,(function(e,s){return a("li",{key:s},[t._v(t._s(e))])})),0)]:t._e()]}}])})],1)],1)],1)],1)},r=[],l={name:"JsBaseAjax",data:function(){return{ajax_info:null,demo_get:null,tableData:[{method:"open(method,url,async)",describe:{title:"规定请求的类型、URL 以及是否异步处理请求。",desc:["method：请求的类型；GET 或 POST","url：文件在服务器上的位置","async：true（异步）或 false（同步）"]}},{method:"send(string)",describe:{title:"将请求发送到服务器。",desc:["string：仅用于 POST 请求）"]}},{method:"setRequestHeader(header,value)",describe:{title:"向请求添加 HTTP 头。",desc:["header: 规定头的名称","value: 规定头的值"]}}],responseData:[{method:"responseText",describe:"获得字符串形式的响应数据。"},{method:"responseXML",describe:"获得 XML 形式的响应数据。"}],readyStateData:[{method:"onreadystatechange",describe:{title:"存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。",desc:null}},{method:"readyState",describe:{title:"存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。",desc:["0: 请求未初始化","1: 服务器连接已建立","2: 请求已接收","3: 请求处理中","4: 请求已完成，且响应已就绪"]}},{method:"status",describe:{title:'200: "OK"<br />404: 未找到页面',desc:null}}]}},methods:{ajaxInfo:function(){var t=this;if(this.$store.state.todayVideo)this.ajax_info=this.$store.state.todayVideo;else{var e=new XMLHttpRequest;e.onreadystatechange=function(){if(4===e.readyState&&200===e.status){var a=JSON.parse(e.responseText);200===a.code?(t.ajax_info=a.result,t.$store.commit("setTodayVideo",a.result)):t.ajax_info="没有数据"}else t.ajax_info="请求错误"},e.open("get","https://api.apiopen.top/videoHomeTab",!0),e.send()}}},created:function(){},mounted:function(){console.log("mounted")}},i=l,o=a("2877"),n=Object(o["a"])(i,s,r,!1,null,null,null);e["default"]=n.exports}}]);
//# sourceMappingURL=chunk-2d0cc79b.63222d77.js.map